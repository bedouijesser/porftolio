---
import '../styles/global.css';
import { SEO } from "astro-seo"
import { seoConfig } from "@util/seoConfig"

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'Jesser Bedoui: Personal Site',
	description = 'The personal site of Jesser Bedoui',
} = Astro.props;
---
<SEO
			title={title}
			description={seoConfig.description || description}
			openGraph={{
				basic: {
					title: title,
					type: "website",
					image: seoConfig.image.url
				},
				image: {
					width: seoConfig.image.width,
					height: seoConfig.image.height,
					alt: seoConfig.image.alt
				},
				optional: {
					siteName: seoConfig.siteName,
					description: seoConfig.description || description
				}
			}}
			twitter={{
				card: seoConfig.twitter.card
			}}
		/>
<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#39529d">
<link rel="manifest" href="/site.webmanifest">
<meta name="msapplication-TileColor" content="#090b11">
<meta name="theme-color" content="#090b11">
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>

<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>
<script is:inline src="/registerSW.js"></script>
